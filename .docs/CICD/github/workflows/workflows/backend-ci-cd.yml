name: Backend CI/CD

on:
  push:
    branches: [main, develop]
    paths: ['backend/**', '.github/workflows/backend-ci-cd.yml']
  pull_request:
    branches: [main, develop]
    paths: ['backend/**']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      project:
        description: 'Backend project to deploy'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - backend-pro1
          - backend-pro2

env:
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  
jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend-pro1: ${{ steps.changes.outputs.backend-pro1 }}
      backend-pro2: ${{ steps.changes.outputs.backend-pro2 }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend-pro1:
              - 'backend/backend-pro1/**'
              - 'backend/scripts/**'
            backend-pro2:
              - 'backend/backend-pro2/**'
              - 'backend/scripts/**'

  test-backend-pro1:
    name: Test Backend Pro1
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-pro1 == 'true' || github.event.inputs.project == 'all' || github.event.inputs.project == 'backend-pro1'
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres123
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./backend/backend-pro1
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov black flake8 mypy

      - name: Code formatting check
        working-directory: ./backend/backend-pro1
        run: black --check .

      - name: Linting
        working-directory: ./backend/backend-pro1
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Type checking
        working-directory: ./backend/backend-pro1
        run: mypy . --ignore-missing-imports
        continue-on-error: true

      - name: Run unit tests
        working-directory: ./backend/backend-pro1
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres123@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci-32-characters-long
          DEBUG: true
        run: |
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/backend-pro1/coverage.xml
          flags: backend-pro1
          name: backend-pro1-coverage

  test-backend-pro2:
    name: Test Backend Pro2
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-pro2 == 'true' || github.event.inputs.project == 'all' || github.event.inputs.project == 'backend-pro2'
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: postgres123
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        working-directory: ./backend/backend-pro2
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov black flake8 mypy

      - name: Code formatting check
        working-directory: ./backend/backend-pro2
        run: black --check .

      - name: Linting
        working-directory: ./backend/backend-pro2
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Type checking
        working-directory: ./backend/backend-pro2
        run: mypy . --ignore-missing-imports
        continue-on-error: true

      - name: Run unit tests
        working-directory: ./backend/backend-pro2
        env:
          DATABASE_URL: postgresql+asyncpg://postgres:postgres123@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci-32-characters-long
          DEBUG: true
        run: |
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/backend-pro2/coverage.xml
          flags: backend-pro2
          name: backend-pro2-coverage

  build-backend-pro1:
    name: Build Backend Pro1 Image
    runs-on: ubuntu-latest
    needs: [detect-changes, test-backend-pro1]
    if: needs.detect-changes.outputs.backend-pro1 == 'true' || github.event.inputs.project == 'all' || github.event.inputs.project == 'backend-pro1'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/saascontroldeck-backend-pro1
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend/backend-pro1
          file: ./backend/backend-pro1/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=backend-pro1
          cache-to: type=gha,mode=max,scope=backend-pro1

  build-backend-pro2:
    name: Build Backend Pro2 Image
    runs-on: ubuntu-latest
    needs: [detect-changes, test-backend-pro2]
    if: needs.detect-changes.outputs.backend-pro2 == 'true' || github.event.inputs.project == 'all' || github.event.inputs.project == 'backend-pro2'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/saascontroldeck-backend-pro2
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend/backend-pro2
          file: ./backend/backend-pro2/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=backend-pro2
          cache-to: type=gha,mode=max,scope=backend-pro2

  security-scan:
    name: Security Scan Backend
    runs-on: ubuntu-latest
    needs: [build-backend-pro1, build-backend-pro2]
    if: always() && (needs.build-backend-pro1.result == 'success' || needs.build-backend-pro2.result == 'success')
    
    strategy:
      matrix:
        include:
          - project: backend-pro1
            needs-result: ${{ needs.build-backend-pro1.result }}
            image-tag: ${{ needs.build-backend-pro1.outputs.image-tag }}
          - project: backend-pro2
            needs-result: ${{ needs.build-backend-pro2.result }}
            image-tag: ${{ needs.build-backend-pro2.outputs.image-tag }}
    
    steps:
      - name: Run Trivy vulnerability scanner
        if: matrix.needs-result == 'success'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.image-tag }}
          format: 'sarif'
          output: 'trivy-${{ matrix.project }}-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        if: matrix.needs-result == 'success'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-${{ matrix.project }}-results.sarif'

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-backend-pro1, build-backend-pro2]
    if: always() && (needs.build-backend-pro1.result == 'success' || needs.build-backend-pro2.result == 'success')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Compose
        run: |
          docker compose -f backend/backend-pro1/docker-compose.yml up -d --wait || true
          docker compose -f backend/backend-pro2/docker-compose.yml up -d --wait || true

      - name: Wait for services
        run: |
          echo "Waiting for services to be ready..."
          sleep 60

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          # Add your integration test commands here
          # For example: pytest backend/tests/integration/

      - name: Cleanup
        if: always()
        run: |
          docker compose -f backend/backend-pro1/docker-compose.yml down || true
          docker compose -f backend/backend-pro2/docker-compose.yml down || true

  deploy-staging:
    name: Deploy Backend to Staging
    runs-on: ubuntu-latest
    needs: [build-backend-pro1, build-backend-pro2, integration-tests, security-scan]
    if: |
      always() && 
      (github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging') &&
      (needs.build-backend-pro1.result == 'success' || needs.build-backend-pro2.result == 'success') &&
      needs.integration-tests.result == 'success'
    environment:
      name: backend-staging
      
    steps:
      - name: Deploy to staging
        run: |
          echo "🚀 Deploying backend services to staging"
          # Add your staging deployment logic here
          # This could be updating K8s deployments, Docker Swarm, etc.

      - name: Run health checks
        run: |
          echo "⏳ Running health checks..."
          # Add health check commands here
          echo "✅ Backend staging deployment successful"

  deploy-production:
    name: Deploy Backend to Production
    runs-on: ubuntu-latest
    needs: [build-backend-pro1, build-backend-pro2, integration-tests, security-scan]
    if: |
      always() && 
      (github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production') &&
      (needs.build-backend-pro1.result == 'success' || needs.build-backend-pro2.result == 'success') &&
      needs.integration-tests.result == 'success'
    environment:
      name: backend-production
      
    steps:
      - name: Deploy to production
        run: |
          echo "🚀 Deploying backend services to production"
          # Add your production deployment logic here

      - name: Run health checks
        run: |
          echo "⏳ Running health checks..."
          # Add health check commands here
          echo "✅ Backend production deployment successful"

      - name: Notify team
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Backend production deployment completed successfully"
          else
            echo "❌ Backend production deployment failed"
          fi