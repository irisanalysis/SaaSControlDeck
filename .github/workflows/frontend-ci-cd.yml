name: Frontend CI/CD with Multi-Environment Deployment

on:
  push:
    branches: [main, develop]
    paths: ['frontend/**', 'package.json', 'vercel.json', '.github/workflows/frontend-ci-cd.yml']
  pull_request:
    branches: [main, develop]
    paths: ['frontend/**', 'package.json', 'vercel.json']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'vercel-staging'
        type: choice
        options:
          - vercel-staging
          - cloud-staging
          - cloud-production

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: saascontroldeck-frontend
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

jobs:
  test-and-lint:
    name: Test & Lint Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript check
        run: npm run typecheck

      - name: Run ESLint
        run: npm run lint

      - name: Run security audit
        run: npm audit --audit-level moderate
        continue-on-error: true

      - name: Check for sensitive files
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./frontend
          base: main
          head: HEAD
        continue-on-error: true

  build:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: test-and-lint
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

  security-scan:
    name: Security Scan Frontend
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-vercel-staging:
    name: Deploy to Vercel (Testing)
    runs-on: ubuntu-latest
    needs: test-and-lint
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'vercel-staging'
    environment:
      name: vercel-staging
      url: ${{ steps.vercel-deploy.outputs.preview-url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Vercel CLI
        run: npm install -g vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy to Vercel
        id: vercel-deploy
        run: |
          DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
          echo "preview-url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
          echo "üöÄ Deployed to Vercel: $DEPLOYMENT_URL"

      - name: Run health check
        run: |
          echo "‚è≥ Waiting for Vercel deployment to be ready..."
          sleep 20
          curl -f ${{ steps.vercel-deploy.outputs.preview-url }}/api/health || echo "Health check endpoint not available"
          echo "‚úÖ Vercel deployment successful"

      - name: Run Lighthouse CI on Vercel
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: ${{ steps.vercel-deploy.outputs.preview-url }}
          uploadArtifacts: true
          temporaryPublicStorage: true

  deploy-cloud-staging:
    name: Deploy to Cloud Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'cloud-staging'
    environment:
      name: cloud-staging
      url: https://staging.saascontroldeck.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.CLOUD_SERVER_SSH_KEY }}

      - name: Deploy to Cloud Staging
        run: |
          echo "üöÄ Deploying frontend to cloud staging environment"
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          
          # Copy deployment scripts to server
          scp -o StrictHostKeyChecking=no scripts/deploy-staging.sh ${{ secrets.CLOUD_SERVER_USER }}@${{ secrets.CLOUD_SERVER_HOST }}:/tmp/
          
          # Execute deployment script
          ssh -o StrictHostKeyChecking=no ${{ secrets.CLOUD_SERVER_USER }}@${{ secrets.CLOUD_SERVER_HOST }} \
            "chmod +x /tmp/deploy-staging.sh && /tmp/deploy-staging.sh ${{ needs.build.outputs.image-tag }}"

      - name: Run health check
        run: |
          echo "‚è≥ Waiting for cloud deployment to be ready..."
          sleep 60
          curl -f https://staging.saascontroldeck.com/api/health || exit 1
          echo "‚úÖ Cloud staging deployment successful"

      - name: Run E2E tests
        run: |
          echo "üß™ Running E2E tests against cloud staging"
          # Add your E2E test commands here

  deploy-cloud-production:
    name: Deploy to Cloud Production
    runs-on: ubuntu-latest
    needs: [build, security-scan, deploy-cloud-staging]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'cloud-production'
    environment:
      name: cloud-production
      url: https://saascontroldeck.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.CLOUD_SERVER_SSH_KEY }}

      - name: Create production backup
        run: |
          echo "üì¶ Creating production backup..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.CLOUD_SERVER_USER }}@${{ secrets.CLOUD_SERVER_HOST }} \
            "docker exec saascontroldeck-frontend-prod tar czf /backups/frontend-$(date +%Y%m%d-%H%M%S).tar.gz /app || echo 'Backup creation failed, continuing...'"

      - name: Deploy to Cloud Production
        run: |
          echo "üöÄ Deploying frontend to cloud production environment"
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          
          # Copy deployment scripts to server
          scp -o StrictHostKeyChecking=no scripts/deploy-production.sh ${{ secrets.CLOUD_SERVER_USER }}@${{ secrets.CLOUD_SERVER_HOST }}:/tmp/
          
          # Execute deployment script with blue-green deployment
          ssh -o StrictHostKeyChecking=no ${{ secrets.CLOUD_SERVER_USER }}@${{ secrets.CLOUD_SERVER_HOST }} \
            "chmod +x /tmp/deploy-production.sh && /tmp/deploy-production.sh ${{ needs.build.outputs.image-tag }}"

      - name: Run comprehensive health check
        run: |
          echo "‚è≥ Waiting for production deployment to be ready..."
          sleep 90
          
          # Health check with retries
          for i in {1..5}; do
            if curl -f https://saascontroldeck.com/api/health; then
              echo "‚úÖ Health check passed on attempt $i"
              break
            elif [ $i -eq 5 ]; then
              echo "‚ùå Health check failed after 5 attempts"
              exit 1
            else
              echo "‚è≥ Health check failed on attempt $i, retrying..."
              sleep 30
            fi
          done

      - name: Run smoke tests
        run: |
          echo "üß™ Running production smoke tests"
          curl -f https://saascontroldeck.com/ || exit 1
          curl -f https://saascontroldeck.com/api/pro1/health || exit 1
          curl -f https://saascontroldeck.com/api/pro2/health || exit 1
          echo "‚úÖ Smoke tests passed"

      - name: Notify team
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Production deployment completed successfully"
            # Add Slack notification
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"üöÄ SaaS Control Deck frontend deployed to production successfully!"}' \
              ${{ secrets.SLACK_WEBHOOK_URL }} || echo "Slack notification failed"
          else
            echo "‚ùå Production deployment failed"
            # Add failure notification
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"üö® SaaS Control Deck frontend production deployment FAILED!"}' \
              ${{ secrets.SLACK_WEBHOOK_URL }} || echo "Slack notification failed"
          fi

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-vercel-staging, deploy-cloud-staging, deploy-cloud-production]
    if: always() && (needs.deploy-cloud-staging.result == 'success' || needs.deploy-cloud-production.result == 'success')
    
    steps:
      - name: Run Lighthouse CI on all environments
        uses: treosh/lighthouse-ci-action@v12
        with:
          urls: |
            https://staging.saascontroldeck.com
            https://saascontroldeck.com
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Performance budget check
        run: |
          echo "üìä Checking performance budgets..."
          # Add performance budget validation logic
          echo "Performance monitoring completed"

  rollback-production:
    name: Rollback Production (Manual)
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    needs: [deploy-cloud-production]
    environment:
      name: cloud-production
    
    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.CLOUD_SERVER_SSH_KEY }}

      - name: Rollback to previous version
        run: |
          echo "üîÑ Initiating production rollback..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.CLOUD_SERVER_USER }}@${{ secrets.CLOUD_SERVER_HOST }} \
            "cd /opt/saascontroldeck && ./scripts/rollback-frontend.sh"
          echo "‚úÖ Rollback completed"