name: Frontend CI/CD

on:
  push:
    branches: [main, develop]
    paths: ['frontend/**', 'package.json', '.github/workflows/frontend-ci-cd.yml']
  pull_request:
    branches: [main, develop]
    paths: ['frontend/**', 'package.json']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: saascontroldeck-frontend

jobs:
  test-and-lint:
    name: Test & Lint Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript check
        run: npm run typecheck

      - name: Run ESLint
        run: npm run lint

      - name: Run security audit
        run: npm audit --audit-level moderate
        continue-on-error: true

      - name: Check for sensitive files
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./frontend
          base: main
          head: HEAD
        continue-on-error: true

  build:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: test-and-lint
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NODE_ENV=production

  security-scan:
    name: Security Scan Frontend
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    
    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ needs.build.outputs.image-tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.saascontroldeck.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "üöÄ Deploying frontend to staging environment"
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          # Add your staging deployment logic here
          # This could be deploying to Vercel, AWS, GCP, etc.

      - name: Run health check
        run: |
          echo "‚è≥ Waiting for deployment to be ready..."
          sleep 30
          curl -f https://staging.saascontroldeck.com/api/health || exit 1
          echo "‚úÖ Staging deployment successful"

      - name: Run E2E tests
        run: |
          echo "üß™ Running E2E tests against staging"
          # Add your E2E test commands here

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://saascontroldeck.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying frontend to production environment"
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          # Add your production deployment logic here

      - name: Run health check
        run: |
          echo "‚è≥ Waiting for deployment to be ready..."
          sleep 60
          curl -f https://saascontroldeck.com/api/health || exit 1
          echo "‚úÖ Production deployment successful"

      - name: Notify team
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Production deployment completed successfully"
            # Add notification logic (Slack, email, etc.)
          else
            echo "‚ùå Production deployment failed"
            # Add failure notification logic
          fi

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://staging.saascontroldeck.com
            https://saascontroldeck.com
          uploadArtifacts: true
          temporaryPublicStorage: true