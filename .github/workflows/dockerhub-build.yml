name: DockerHub Build & Push

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  DOCKERHUB_USERNAME: irisanalysis
  FRONTEND_IMAGE: irisanalysis/saascontrol-frontend
  BACKEND_IMAGE: irisanalysis/saascontrol-backend
  REGISTRY: docker.io

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Prepare Next.js for Docker build
        run: |
          cd frontend
          # Install dependencies for better caching
          npm ci
          # Set Docker build environment variable
          echo "DOCKER_BUILD=true" >> $GITHUB_ENV
          echo "Next.js configured for Docker standalone build"

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: frontend/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.FRONTEND_IMAGE }}:latest
            ${{ env.FRONTEND_IMAGE }}:build-${{ github.run_number }}
            ${{ env.FRONTEND_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            DOCKER_BUILD=true
            BUILDKIT_INLINE_CACHE=1

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Backend
        uses: docker/build-push-action@v5
        with:
          context: backend/backend-pro1
          file: backend/backend-pro1/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.BACKEND_IMAGE }}:latest
            ${{ env.BACKEND_IMAGE }}:build-${{ github.run_number }}
            ${{ env.BACKEND_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  verify-images:
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    if: always() && (needs.build-frontend.result == 'success' || needs.build-backend.result == 'success')
    steps:
      - name: Verify pushed images
        run: |
          echo "Verifying pushed Docker images..."

          # Check frontend image
          if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
            echo "Checking frontend image: ${{ env.FRONTEND_IMAGE }}:latest"
            docker pull ${{ env.FRONTEND_IMAGE }}:latest
            docker run --rm ${{ env.FRONTEND_IMAGE }}:latest node --version
          fi

          # Check backend image
          if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
            echo "Checking backend image: ${{ env.BACKEND_IMAGE }}:latest"
            docker pull ${{ env.BACKEND_IMAGE }}:latest
            docker run --rm ${{ env.BACKEND_IMAGE }}:latest python --version
          fi

          echo "✅ Image verification completed"

  summary:
    needs: [build-frontend, build-backend, verify-images]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "# 🐳 DockerHub Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Image | Verified |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|-------|----------|" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
            VERIFY_STATUS="✅"
            if [[ "${{ needs.verify-images.result }}" != "success" ]]; then
              VERIFY_STATUS="⚠️"
            fi
            echo "| Frontend | ✅ Success | \`${{ env.FRONTEND_IMAGE }}:latest\` | $VERIFY_STATUS |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Frontend | ❌ Failed | - | ❌ |" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
            VERIFY_STATUS="✅"
            if [[ "${{ needs.verify-images.result }}" != "success" ]]; then
              VERIFY_STATUS="⚠️"
            fi
            echo "| Backend | ✅ Success | \`${{ env.BACKEND_IMAGE }}:latest\` | $VERIFY_STATUS |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Backend | ❌ Failed | - | ❌ |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Deployment Command" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "./deploy-from-dockerhub.sh -u irisanalysis -t latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📦 Available Images" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: [irisanalysis/saascontrol-frontend](https://hub.docker.com/r/irisanalysis/saascontrol-frontend)" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: [irisanalysis/saascontrol-backend](https://hub.docker.com/r/irisanalysis/saascontrol-backend)" >> $GITHUB_STEP_SUMMARY