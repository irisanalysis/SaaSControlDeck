name: DockerHub Build (Simplified)

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  DOCKERHUB_USERNAME: irisanalysis
  FRONTEND_IMAGE: irisanalysis/saascontrol-frontend
  BACKEND_IMAGE: irisanalysis/saascontrol-backend

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Prepare Next.js for Docker build
        run: |
          # Check if next.config.ts exists and update it for Docker
          if [ -f "frontend/next.config.ts" ]; then
            echo "Updating Next.js config for Docker build..."
            # Create a temporary config with standalone output
            cat > frontend/next.config.docker.ts << 'EOF'
          import type {NextConfig} from 'next';

          const nextConfig: NextConfig = {
            output: 'standalone',
            eslint: {
              ignoreDuringBuilds: true,
            },
            typescript: {
              ignoreBuildErrors: true,
            },
            experimental: {
              outputFileTracingRoot: undefined,
            },
          };

          export default nextConfig;
          EOF
            # Backup original and use Docker version
            cp frontend/next.config.ts frontend/next.config.ts.backup
            cp frontend/next.config.docker.ts frontend/next.config.ts
          fi

      - name: Build and push Frontend
        uses: docker/build-push-action@v5
        with:
          context: .
          file: frontend/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.FRONTEND_IMAGE }}:latest
            ${{ env.FRONTEND_IMAGE }}:build-${{ github.run_number }}

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Backend
        uses: docker/build-push-action@v5
        with:
          context: backend/backend-pro1
          file: backend/backend-pro1/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.BACKEND_IMAGE }}:latest
            ${{ env.BACKEND_IMAGE }}:build-${{ github.run_number }}

  summary:
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Build Summary
        run: |
          echo "# 🐳 DockerHub Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Image |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|-------|" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.build-frontend.result }}" == "success" ]]; then
            echo "| Frontend | ✅ Success | \`${{ env.FRONTEND_IMAGE }}:latest\` |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Frontend | ❌ Failed | - |" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.build-backend.result }}" == "success" ]]; then
            echo "| Backend | ✅ Success | \`${{ env.BACKEND_IMAGE }}:latest\` |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Backend | ❌ Failed | - |" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🚀 Deployment Command" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "./deploy-from-dockerhub.sh -u irisanalysis -t latest" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY