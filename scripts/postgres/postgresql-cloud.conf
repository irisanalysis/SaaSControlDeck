# ===========================================
# PostgreSQL 云服务器生产环境配置
# ===========================================
# 针对SaaS Control Deck优化的PostgreSQL配置
# 适用于4-8GB内存的云服务器

# ===========================================
# 连接和认证配置
# ===========================================
listen_addresses = '*'
port = 5432
max_connections = 200
superuser_reserved_connections = 3

# 认证配置
authentication_timeout = 60s
password_encryption = scram-sha-256
ssl = on
ssl_cert_file = '/var/lib/postgresql/data/server.crt'
ssl_key_file = '/var/lib/postgresql/data/server.key'

# ===========================================
# 内存配置 (针对4-8GB内存优化)
# ===========================================
shared_buffers = 1GB                    # 25% of RAM for 4GB system
effective_cache_size = 3GB               # 75% of RAM for 4GB system
maintenance_work_mem = 256MB             # For maintenance operations
work_mem = 16MB                          # Per connection work memory
wal_buffers = 16MB                       # WAL buffer size

# 大查询和排序优化
max_stack_depth = 7MB
temp_buffers = 32MB

# ===========================================
# 查询计划器配置
# ===========================================
random_page_cost = 1.1                  # SSD优化
seq_page_cost = 1.0
cpu_tuple_cost = 0.01
cpu_index_tuple_cost = 0.005
cpu_operator_cost = 0.0025

# 查询计划缓存
plan_cache_mode = auto

# ===========================================
# WAL和检查点配置 (高性能)
# ===========================================
wal_level = replica
wal_compression = on
wal_log_hints = on

# 检查点配置 - 减少IO压力
checkpoint_timeout = 15min
checkpoint_completion_target = 0.9
checkpoint_flush_after = 256kB

# WAL归档配置
archive_mode = on
archive_command = 'test ! -f /var/lib/postgresql/data/archive/%f && cp %p /var/lib/postgresql/data/archive/%f'
archive_timeout = 300s

# WAL写入配置
wal_writer_delay = 200ms
wal_writer_flush_after = 1MB

# ===========================================
# 复制和高可用配置
# ===========================================
max_wal_senders = 3
max_replication_slots = 3
wal_keep_size = 2GB
hot_standby = on
hot_standby_feedback = on

# ===========================================
# 后台写进程配置
# ===========================================
bgwriter_delay = 200ms
bgwriter_lru_maxpages = 100
bgwriter_lru_multiplier = 2.0
bgwriter_flush_after = 512kB

# ===========================================
# 自动清理配置 (VACUUM)
# ===========================================
autovacuum = on
autovacuum_max_workers = 3
autovacuum_naptime = 30s
autovacuum_vacuum_threshold = 50
autovacuum_vacuum_scale_factor = 0.2
autovacuum_vacuum_cost_delay = 10ms
autovacuum_vacuum_cost_limit = 200

# 分析统计配置
autovacuum_analyze_threshold = 50
autovacuum_analyze_scale_factor = 0.1

# ===========================================
# 统计收集器配置
# ===========================================
track_activities = on
track_counts = on
track_io_timing = on
track_functions = all
track_activity_query_size = 4096

# 统计目标优化
default_statistics_target = 1000

# ===========================================
# 日志配置
# ===========================================
logging_collector = on
log_destination = 'stderr'
log_directory = '/var/lib/postgresql/data/logs'
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
log_file_mode = 0640
log_truncate_on_rotation = on
log_rotation_age = 1d
log_rotation_size = 100MB

# 日志级别和内容
log_min_messages = warning
log_min_error_statement = error
log_min_duration_statement = 1000ms    # 记录超过1秒的查询

# 详细日志配置
log_checkpoints = on
log_connections = on
log_disconnections = on
log_duration = off
log_hostname = on
log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '
log_lock_waits = on
log_statement = 'ddl'
log_temp_files = 10MB

# ===========================================
# 错误报告和调试
# ===========================================
log_error_verbosity = default
log_statement_stats = off
log_parser_stats = off
log_planner_stats = off
log_executor_stats = off

# ===========================================
# 运行时统计
# ===========================================
track_activities = on
track_counts = on
track_io_timing = on
track_functions = all

# ===========================================
# 客户端连接默认值
# ===========================================
default_text_search_config = 'pg_catalog.english'
dynamic_shared_memory_type = posix

# 时区配置
timezone = 'UTC'
log_timezone = 'UTC'

# 字符集配置
lc_messages = 'en_US.UTF-8'
lc_monetary = 'en_US.UTF-8'
lc_numeric = 'en_US.UTF-8'
lc_time = 'en_US.UTF-8'

# ===========================================
# 锁和并发配置
# ===========================================
max_locks_per_transaction = 64
max_pred_locks_per_transaction = 64
max_prepared_transactions = 0

# 死锁检测
deadlock_timeout = 1s

# ===========================================
# 资源使用限制
# ===========================================
max_files_per_process = 10000
max_function_stack_depth = 7MB

# ===========================================
# SaaS Control Deck特定优化
# ===========================================

# AI数据处理优化
effective_io_concurrency = 4            # SSD并发IO
max_worker_processes = 8                 # 工作进程数
max_parallel_workers = 4                 # 并行查询工作进程
max_parallel_workers_per_gather = 2      # 每个Gather节点的工作进程
max_parallel_maintenance_workers = 2     # 维护操作并行度

# JSON数据优化 (AI响应存储)
gin_pending_list_limit = 4MB

# 全文搜索优化
default_text_search_config = 'pg_catalog.english'

# 时间序列数据优化 (监控数据)
enable_partitionwise_join = on
enable_partitionwise_aggregate = on

# ===========================================
# 扩展配置
# ===========================================

# 允许的扩展
shared_preload_libraries = 'pg_stat_statements,auto_explain'

# pg_stat_statements配置
pg_stat_statements.max = 10000
pg_stat_statements.track = all
pg_stat_statements.track_utility = on
pg_stat_statements.save = on

# auto_explain配置 (调试慢查询)
auto_explain.log_min_duration = 3s
auto_explain.log_analyze = on
auto_explain.log_buffers = on
auto_explain.log_timing = on
auto_explain.log_verbose = on

# ===========================================
# 安全配置
# ===========================================

# 行级安全
row_security = on

# 连接安全
ssl_prefer_server_ciphers = on
ssl_ciphers = 'HIGH:MEDIUM:+3DES:!aNULL'

# 审计日志 (如果需要)
# log_statement = 'all'  # 谨慎使用，会产生大量日志