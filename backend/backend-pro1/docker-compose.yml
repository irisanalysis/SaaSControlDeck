version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: postgres-pro1
    environment:
      POSTGRES_DB: ai_platform_pro1
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - pro1-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: redis-pro1
    command: redis-server --appendonly yes --requirepass redis123
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - pro1-network

  # MinIO对象存储
  minio:
    image: minio/minio:latest
    container_name: minio-pro1
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - pro1-network

  # API网关服务
  api-gateway:
    build: .
    container_name: api-gateway-pro1
    environment:
      - PROJECT_ID=pro1
      - API_GATEWAY_PORT=8000
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres123@postgres:5432/ai_platform_pro1
      - REDIS_URL=redis://:redis123@redis:6379/0
      - SECRET_KEY=your-super-secret-key-change-in-production-pro1-32chars
      - DEBUG=true
      - MINIO_ENDPOINT=minio:9000
    command: python -m uvicorn api-gateway.app.main:app --host 0.0.0.0 --port 8000 --reload
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - pro1-network

  # 数据服务
  data-service:
    build: .
    container_name: data-service-pro1
    environment:
      - PROJECT_ID=pro1
      - DATA_SERVICE_PORT=8001
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres123@postgres:5432/ai_platform_pro1
      - REDIS_URL=redis://:redis123@redis:6379/0
      - SECRET_KEY=your-super-secret-key-change-in-production-pro1-32chars
      - DEBUG=true
      - MINIO_ENDPOINT=minio:9000
    command: python -m uvicorn data-service.app.main:app --host 0.0.0.0 --port 8001 --reload
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    volumes:
      - .:/app
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - pro1-network

  # AI分析服务
  ai-service:
    build: .
    container_name: ai-service-pro1
    environment:
      - PROJECT_ID=pro1
      - AI_SERVICE_PORT=8002
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres123@postgres:5432/ai_platform_pro1
      - REDIS_URL=redis://:redis123@redis:6379/0
      - SECRET_KEY=your-super-secret-key-change-in-production-pro1-32chars
      - DEBUG=true
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - RAY_HEAD_NODE_HOST=localhost
      - RAY_HEAD_NODE_PORT=10001
    command: python -m uvicorn ai-service.app.main:app --host 0.0.0.0 --port 8002 --reload
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - pro1-network

  # Celery Worker (异步任务处理)
  celery-worker:
    build: .
    container_name: celery-worker-pro1
    environment:
      - PROJECT_ID=pro1
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres123@postgres:5432/ai_platform_pro1
      - REDIS_URL=redis://:redis123@redis:6379/1
      - SECRET_KEY=your-super-secret-key-change-in-production-pro1-32chars
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    command: celery -A shared.celery_app worker --loglevel=info
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - .:/app
      - ./logs:/app/logs
    networks:
      - pro1-network

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-pro1
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - pro1-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local

networks:
  pro1-network:
    driver: bridge
    name: ai-platform-pro1-network